# All actions have a name that will be displayed in the "Actions" page in GitHub.
name: 'CI'

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    name: GALAHAD/${{ matrix.os }}/${{ matrix.fc }}/${{ matrix.compiler_version }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler_version: [9, 10, 11, 12]
        include:
          - compiler: gnu
            cc: gcc
            fc: gfortran
            cxx: g++
          - os: ubuntu-latest
            compiler: intel-llvm
            compiler_version: 2023.1
            cc: icx
            fc: ifort
            cxx: icpx
          - os: ubuntu-latest
            compiler: intel-llvm
            compiler_version: 2023.1
            cc: icx
            fc: ifx
            cxx: icpx
    runs-on: ${{ matrix.os }}
    env:
      # Set environ for OpenMP
      OMP_CANCELLATION: true
      OMP_PROC_BIND: true
      OMP_NUM_THREADS: 4
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Usually this is always needed
      - uses: actions/checkout@v3

      - name: Install dependencies on Windows
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          choco install wget
          choco install gnuwin32-m4
          wget https://github.com/JuliaBinaryWrappers/OpenBLAS32_jll.jl/releases/download/OpenBLAS32-v0.3.23%2B0/OpenBLAS32.v0.3.23.x86_64-w64-mingw32-libgfortran5.tar.gz
          mkdir openblas
          tar -xzvf OpenBLAS32.v0.3.23.x86_64-w64-mingw32-libgfortran5.tar.gz -C openblas
          wget https://github.com/JuliaBinaryWrappers/METIS_jll.jl/releases/download/METIS-v5.1.2%2B0/METIS.v5.1.2.x86_64-w64-mingw32.tar.gz
          mkdir metis
          tar -xzvf METIS.v5.1.2.x86_64-w64-mingw32.tar.gz -C metis
          wget https://sourceforge.net/projects/gnuwin32/files/autoconf/2.63/autoconf-2.63-bin.zip/download -O autoconf-2.63-bin.zip
          mkdir autoconf
          unzip autoconf-2.63-bin.zip -d autoconf
          wget https://sourceforge.net/projects/gnuwin32/files/automake/1.9.4/automake-1.9.4-bin.zip/download -O automake-1.9.4-bin.zip
          mkdir automake
          unzip automake-1.9.4-bin.zip -d automake

      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libmetis-dev libopenblas-dev

      - name: Install dependencies on MacOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install automake autoconf hwloc metis openblas

      - name: Install GNU C and C++ compilers
        if: matrix.compiler == 'gnu'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{matrix.compiler_version}}

      - name: Install classic Intel C and C++ compilers
        if: matrix.compiler == 'intel'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: intel-classic
          version: ${{matrix.compiler_version}}

      - name: Install nextgen Intel C and C++ compilers
        if: matrix.compiler == 'intel-llvm'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: intel
          version: ${{matrix.compiler_version}}

      # Uncomment this section to obtain ssh access to VM
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: 'Build'
        shell: bash
        run: |
          if [[ "${{matrix.os}}" != "windows-latest" ]]; then
            ./autogen.sh
          else
            ls autoconf/bin
            ls automake/bin
            ./autoconf/bin/autoreconf -ivf
          fi
          ./autogen.sh
          PENDANTIC=""
          if [[ "${{matrix.compiler}}" == "gnu" ]]; then
            PENDANTIC="-pedantic"
          fi
          INTEL=""
          if [[ "${{matrix.compiler}}" == "intel" ]]; then
            INTEL="-diag-disable=10441"
          fi
          WARNING="-Wall"
          OPENMP="-fopenmp"
          if [[ "${{matrix.compiler}}" == "intel" ]] || [[ "${{matrix.compiler}}" == "intel-llvm" ]]; then
            OPENMP="-qopenmp"
            WARNING="-warn all"
          fi
          INCLUDEDIR_OPENBLAS=""
          LIBDIR_OPENBLAS=""
          LIBDIR_METIS=""
          if [[ "${{matrix.os}}" == "macos-latest" ]]; then
            INCLUDEDIR_OPENBLAS="-I$(brew --prefix openblas)/include"
            LIBDIR_OPENBLAS="-L$(brew --prefix openblas)/lib"
            LIBDIR_METIS="-L$(brew --prefix metis)/lib"
          fi
          if [[ "${{matrix.os}}" == "windows-latest" ]]; then
            INCLUDEDIR_OPENBLAS="-I./openblas/include"
            LIBDIR_OPENBLAS="-L./openblas/bin"
            LIBDIR_METIS="-L./metis/bin"
          fi
          ./configure CC=${{matrix.cc}} \
            CXX=${{matrix.cxx}} \
            F77=${{matrix.fc}} \
            FC=${{matrix.fc}} \
            CFLAGS="-g -O3 -Wall $OPENMP $INTEL ${INCLUDEDIR_OPENBLAS}" \
            CXXFLAGS="-g -O3 -Wall $OPENMP $INTEL ${INCLUDEDIR_OPENBLAS}" \
            FCFLAGS="-g -O3 $WARNING $OPENMP $PENDANTIC" \
            --with-blas="${LIBDIR_OPENBLAS} -lopenblas" \
            --with-lapack="${LIBDIR_OPENBLAS} -lopenblas" \
            --with-metis="${LIBDIR_METIS} -lmetis"
          make
      - name: 'Test'
        run: |
          make check
